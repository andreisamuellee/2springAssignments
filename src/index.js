import SodexoData from './modules/sodexo-data';
import FazerData from './modules/fazer-data';
import {fetchGetJson} from './modules/network';

let languageSetting = 'fi';

// console.log('index fasu', FazerData.getDailyMenu(languageSetting));

/**
 * Displays lunch menu items as html list
 *
 * @param {Array} menuData - Lunch menu array
 * @param {string} restaurant - element target id
 */
const renderMenu = (menuData, restaurant) => {
  const list = document.querySelector('#' + restaurant);
  list.innerHTML = '';
  for (const item of menuData) {
    const listItem = document.createElement('li');
    listItem.textContent = item;
    list.appendChild(listItem);
  }
};

/**
 * Switch app lang en/fi
 */
const switchLanguage = async () => {
  if (languageSetting === 'fi') {
    languageSetting = 'en';
  } else {
    languageSetting = 'fi';
  }
  try {
    let dailyMenuJsonFaz;
    if (languageSetting === 'fi') {
      dailyMenuJsonFaz = await fetchGetJson(FazerData.weeklyUrlFi, true);
    } else {
      dailyMenuJsonFaz = await fetchGetJson(FazerData.weeklyUrlEn, true);
    };
    const dailyMenuJson = await fetchGetJson(SodexoData.dailyUrl);
    renderMenu(sortMenu(SodexoData.getDailyMenu(dailyMenuJson, languageSetting), 'asc'), 'sodexo');
    renderMenu(SodexoData.getDailyMenu(languageSetting), 'sodexo');
    renderMenu(FazerData.getDailyMenu(dailyMenuJsonFaz, languageSetting), 'fazer');
  } catch (error) {
    console.error(error);
    // TODO: notify user ?
  }
  console.log('change language to: ', languageSetting);
};

/**
 * Sorts menu alphapetically
 *
 * @param {Array} menu
 * @param {string} order
 * @returns Sorted menu array
 */
const sortMenu = (menu, order) => {
  if (order == 'desc') {
    return menu.sort().reverse();
  } else {
    return menu.sort();
  }
};

/**
 * Eventhandler for sort menu button
 */
const renderSortedMenu = async () => {
  try {
    const dailyMenuJson = await fetchGetJson(SodexoData.dailyUrl);
    renderMenu(sortMenu(SodexoData.getDailyMenu(dailyMenuJson, languageSetting), 'asc'), 'sodexo');
    let dailyMenuJsonFaz;
    if (languageSetting === 'fi') {
      dailyMenuJsonFaz = await fetchGetJson(FazerData.weeklyUrlFi, true);
    } else {
      dailyMenuJsonFaz = await fetchGetJson(FazerData.weeklyUrlEn, true);
    };
    renderMenu(sortMenu(FazerData.getDailyMenu(dailyMenuJsonFaz, languageSetting), 'asc'), 'fazer');
  } catch (error) {
    console.error(error);
    // TODO: notify user ?
  }
};

/**
 * Picks a random dish from lunch menu array
 *
 * @param {Array} menu
 * @returns string dish name
 */
const pickRandomDish = (menu) => {
  const randomIndex = Math.floor(Math.random() * menu.length);
  return menu[randomIndex];
};

const displayRandomDish = async () => {
  try {
    const dailyMenuJson = await fetchGetJson(SodexoData.dailyUrl);
    alert(pickRandomDish(SodexoData.getDailyMenu(dailyMenuJson, languageSetting)));
  } catch (error) {
    console.error(error);
    // TODO: notify user ?
  }
};


const init = async () => {
  document.querySelector('#switch-lang').addEventListener('click', switchLanguage);
  document.querySelector('#sort-menu').addEventListener('click', renderSortedMenu);
  document.querySelector('#pick-dish').addEventListener('click', displayRandomDish);

  try {
    const dailyMenuJson = await fetchGetJson(SodexoData.dailyUrl);
    const parsedMenu = SodexoData.getDailyMenu(dailyMenuJson, languageSetting);
    renderMenu(parsedMenu, 'sodexo');
  } catch (error) {
    console.error(error);
    // TODO: notify user ?
  }

  try {
    // TODO: add multilang support
    const weeklyMenuJson = await fetchGetJson(FazerData.weeklyUrlFi, true);
    // Get number of the weekday (0: Sun, 1: Mon, etc.)
    const weekDay = new Date().getDay();
    const parsedMenu = FazerData.getDailyMenu(weeklyMenuJson, languageSetting, weekDay);
    console.log(parsedMenu);
    renderMenu(parsedMenu, 'fazer');
    console.log(weeklyMenuJson);
  } catch (error) {
    console.error(error);
    // TODO: notify user ?
  }

};
init();

// Service workers registeration below disabled temporarily for easieer local development
// must be uncommented before building for "production"

// register the service worker (SW) generated by Workbox
// if ('serviceWorker' in navigator) {
//   window.addEventListener('load', () => {
//     navigator.serviceWorker.register('./service-worker.js').then(registration => {
//       console.log('SW registered: ', registration);
//     }).catch(registrationError => {
//       console.log('SW registration failed: ', registrationError);
//     });
//   });
// }
